FROM quay.io/fedora/fedora-kinoite:42

RUN <<EORUN
    set -xeuo pipefail

    # Prevent updating the kernel baked into the parent image,
    # to avoid needing to take extra steps to turn it back into
    # a bootable image.
    echo "exclude=kernel-core kernel" >> /etc/dnf/dnf.conf

    dnf update -y
EORUN

RUN <<EORUN
    # Inspired by https://github.com/travier/fedora-sysexts/blob/main/1password-gui/Containerfile
    # Gets 1Password working (relies on /opt/ which won't exist before boot)
    curl -L "https://downloads.1password.com/linux/tar/stable/$(uname -m)/1password-latest.tar.gz" -o /tmp/1password.tar.gz
    mv /opt{,.bak}
    mkdir -p /opt/1Password
    tar -xzf /tmp/1password.tar.gz -C /opt/1Password --strip-components=1
    sh /opt/1Password/after-install.sh
    mv /opt/1Password /usr/lib/1Password
    ln -sf /usr/lib/1Password/1password /usr/bin/1password
    ln -sf /usr/lib/1Password/1Password-BrowserSupport /usr/bin/1Password-BrowserSupport
    ln -sf /usr/lib/1Password/1Password-Crash-Handler /usr/bin/1Password-Crash-Handler
    chmod 4755 /usr/lib/1Password/chrome-sandbox
    sed -i 's|^Exec=/opt/1Password|Exec=/usr/bin|g' /usr/share/applications/1password.desktop
    rm -rf /opt /tmp/*
    mv /opt{.bak,}
EORUN

RUN <<EORUN
    # Nvidia drivers / container toolkit
    source /etc/os-release

    dnf install -y https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$VERSION_ID.noarch.rpm
    dnf install -y https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$VERSION_ID.noarch.rpm

    # Install the packages corresponding to the kernel inside of the image,
    # since uname -r will return the version of the host's kernal
    export KERNEL_UNAME=$(rpm -qa kernel --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}')
    dnf install -y kernel-devel-$KERNEL_UNAME kernel-devel-matched-$KERNEL_UNAME

    dnf install -y akmod-nvidia

    # Prebuild kernel extensions inside of our bootable image
    akmods --force --kernels $KERNEL_UNAME
    depmod $KERNEL_UNAME

    dnf copr enable -y @ai-ml/nvidia-container-toolkit
    dnf install -y nvidia-container-toolkit
EORUN

RUN <<EORUN
    # Docker
    curl -o /etc/yum.repos.d/docker-ce.repo https://download.docker.com/linux/fedora/docker-ce.repo
    dnf install -y docker-ce

    curl -o /etc/yum.repos.d/gh-cli.repo https://cli.github.com/packages/rpm/gh-cli.repo
    dnf install -y gh

    # Sunshine
    dnf copr enable -y lizardbyte/beta
    dnf install -y Sunshine

    # Tailscale
    dnf config-manager addrepo --from-repofile=https://pkgs.tailscale.com/stable/fedora/tailscale.repo
    dnf install -y tailscale

    dnf copr -y enable claaj/typst
    dnf install -y typst

    dnf copr enable -y luminoso/k9s
    dnf install -y k9s

    # Misc
    dnf install -y emacs zsh python-virtualenvwrapper fzf go-task etckeeper qemu-system-$(uname -m) qemu-ui-gtk ripgrep pandoc nc

    rm -rf /var/cache/*
EORUN
